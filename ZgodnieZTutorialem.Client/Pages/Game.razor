@page "/game/{tableName}"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@using ZgodnieZTutorialem.Client.Models
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Poker - Gra</PageTitle>
<h1>Stół: @tableName</h1>

@if (!thisTable.GameStarted)
{
    <h2>Gracze: (@thisTable.Players.Count/@thisTable.MaxPlayerCount)</h2>
    @for (int i = 0; i < thisTable.Players.Count; i++)
    {
        <div style=@(i == MyIndex ? (thisTable.Players[i].IsReady ? "color:#80d000" : "color:#009000") : (thisTable.Players[i].IsReady ? "color:#a0a000" : ""))>
            <h4>Gracz @thisTable.Players[i].Nick:</h4>
            Ilość żetonów: @thisTable.Players[i].Chips
        </div>
    }

    @if (!Joined && thisTable.Players.Count < thisTable.MaxPlayerCount)
    {
        <label>
            Nick:
            <input @bind="nick" />
        </label>
        <button @onclick="JoinTable" disabled="@(nick=="")">Dołącz</button>
    }

    @if(MyIndex != -1)
    {
        @if (Joined && thisTable.Players.Count == thisTable.MaxPlayerCount && !thisTable.Players[MyIndex].IsReady)
        {
            <button @onclick="Ready">Jestem Gotów (@ReadyPlayers/@thisTable.MaxPlayerCount)</button>
        }
    }
}
else
{
    @if(thisTable.Stage == 0)
    {
        <img src="@("Cards/unknown.png")" style="width: 100px; height: auto;" />
        <img src="@("Cards/unknown.png")" style="width: 100px; height: auto;" />
        <img src="@("Cards/unknown.png")" style="width: 100px; height: auto;" />
        <img src="@("Cards/unknown.png")" style="width: 100px; height: auto;" />
        <img src="@("Cards/unknown.png")" style="width: 100px; height: auto;" />
    }
    else if(thisTable.Stage == 1)
    {
        <img src="@("Cards/" + thisTable.Cards[0].ToString() + ".png")" style="width: 100px; height: auto;" />
        <img src="@("Cards/" + thisTable.Cards[1].ToString() + ".png")" style="width: 100px; height: auto;" />
        <img src="@("Cards/" + thisTable.Cards[2].ToString() + ".png")" style="width: 100px; height: auto;" />
        <img src="@("Cards/unknown.png")" style="width: 100px; height: auto;" />
        <img src="@("Cards/unknown.png")" style="width: 100px; height: auto;" />
    }
    else if(thisTable.Stage == 2)
    {
        <img src="@("Cards/" + thisTable.Cards[0].ToString() + ".png")" style="width: 100px; height: auto;" />
        <img src="@("Cards/" + thisTable.Cards[1].ToString() + ".png")" style="width: 100px; height: auto;" />
        <img src="@("Cards/" + thisTable.Cards[2].ToString() + ".png")" style="width: 100px; height: auto;" />
        <img src="@("Cards/" + thisTable.Cards[3].ToString() + ".png")" style="width: 100px; height: auto;" />
        <img src="@("Cards/unknown.png")" style="width: 100px; height: auto;" />
    }
    else if (thisTable.Stage >= 3)
    {
        <img src="@("Cards/" + thisTable.Cards[0].ToString() + ".png")" style="width: 100px; height: auto;" />
        <img src="@("Cards/" + thisTable.Cards[1].ToString() + ".png")" style="width: 100px; height: auto;" />
        <img src="@("Cards/" + thisTable.Cards[2].ToString() + ".png")" style="width: 100px; height: auto;" />
        <img src="@("Cards/" + thisTable.Cards[3].ToString() + ".png")" style="width: 100px; height: auto;" />
        <img src="@("Cards/" + thisTable.Cards[4].ToString() + ".png")" style="width: 100px; height: auto;" />
    }
    <br>
    <br>
    @for(int i = 0; i < thisTable.MaxPlayerCount; i++)
    {
        <div style=@((i == thisTable.Turn && thisTable.Stage <= 3) ? (i == MyIndex ? (thisTable.Players[i].Fold ? "color:#70c070; background-color:#f2f2f2" : "color:#009000; background-color:#f2f2f2") : (thisTable.Players[i].Fold ? "color:#b0b0b0; background-color:#f2f2f2" : "background-color:#f2f2f2")) : (i == MyIndex ? (thisTable.Players[i].Fold ? "color:#70c070" : "color:#009000") : (thisTable.Players[i].Fold ? "color:#b0b0b0" : "")))>
            <h3>@thisTable.Players[i].Nick@(thisTable.Dealer == i ? " (Dealer)" : "")</h3>
            <h5>Żetony: @thisTable.Players[i].Chips</h5>

            @if (i == MyIndex || thisTable.Stage == 4 || thisTable.Stage == 6)
            {
                <img src="@("Cards/" + thisTable.Players[i].Cards[0].ToString() + ".png")" style="width: 50px; height: auto;" />
                <img src="@("Cards/" + thisTable.Players[i].Cards[1].ToString() + ".png")" style="width: 50px; height: auto;" />
                @if (i == thisTable.Turn && thisTable.Stage < 4)
                {
                    <input @bind="bid" />
                    <button @onclick="Bid" disabled="@(bid > thisTable.Players[i].Chips || bid > maxBid || bid <= minBid || thisTable.Players[i].Fold)">Podbij</button>
                    <button @onclick="Check" disabled="@(bid != minBid || thisTable.Players[i].Fold)">Sprawdź</button>
                    <button @onclick="Fold" disabled="@thisTable.Players[i].Fold">Pas</button>
                }
            }
            else
            {
                <img src="Cards/unknown.png" style="width: 50px; height: auto;" />
                <img src="Cards/unknown.png" style="width: 50px; height: auto;" />
            }
            <h5>Postawiono: @thisTable.Players[i].CurrentBid</h5>
        </div>
        <br>
    }

    @if(thisTable.Stage == 4)
    {
        <h1>Rozdanie wygrywa gracz @thisTable.Players[thisTable.Winner].Nick</h1>
        //TODO: Show cofiguration of winning hand and chips won

        <button>Okej</button>
        //TODO: Add button to reset game
    }
    else if (thisTable.Stage == 5) //if everyone folded but one player
    {
        <h1>Wszyscy gracze spasowali, rozdanie wygrywa @thisTable.Players[thisTable.Winner].Nick</h1>
        //TODO: Show chips won

        <button>Okej</button>
        //TODO: Add button to reset game
    }
    else if(thisTable.Stage == 6) //end game
    {
        <h1>Gre wygrywa gracz @thisTable.Players[thisTable.Winner].Nick</h1>
        //TODO Show winner

        <button>Okej</button>
        //TODO: Add button to go back to lobby
    }
}

@code {
    [Parameter] public string? tableName { get; set; }

    private bool Joined = false;
    private HubConnection? hubConnection;
    private int MyIndex = -1;
    private int ReadyPlayers = 0;
    Table thisTable = new();
    private string nick = "";
    private int bid = 0;
    private int minBid = 0;
    private int maxBid = 0;

    private async Task Fold()
    {
        if (DebugInfo.debug)
            Console.WriteLine($"Fold called in Game by player \"{nick}\"");

        if (hubConnection is not null)
            await hubConnection.SendAsync("Fold", tableName, MyIndex);
    }

    private async Task Check()
    {
        if (DebugInfo.debug)
            Console.WriteLine($"Check called in Game by player \"{nick}\" and bid {bid}");

        if (hubConnection is not null)
            await hubConnection.SendAsync("Check", tableName, MyIndex, bid);

        minBid = 0;
        bid = 0;
    }

    private async Task Bid()
    {
        if (DebugInfo.debug)
            Console.WriteLine($"Bid {bid} called in Game by player \"{nick}\" and bid {bid}");

        if (hubConnection is not null)
            await hubConnection.SendAsync("Bid", tableName, MyIndex, bid);
    }

    private async Task Ready()
    {
        if(DebugInfo.debug)
            Console.WriteLine($"Ready called in Game by player \"{nick}\"");

        if (hubConnection is not null)
            await hubConnection.SendAsync("Ready", tableName, MyIndex);
    }

    private async Task JoinTable()
    {
        if (DebugInfo.debug)
            Console.WriteLine($"JoinTable called in Game with nick=\"{nick}\" and tableName=\"{tableName}\"");

        foreach (var player in thisTable.Players)
        {
            if (player.Nick == nick)
            {
                if (DebugInfo.debug)
                    Console.WriteLine("Cannot join (player with this nick already exists");
                return;
            }
        }

        Joined = true;
        MyIndex = thisTable.Players.Count;

        if (hubConnection is not null)
            await hubConnection.SendAsync("JoinTable", tableName, nick);
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/tablehub"))
            .Build();

        hubConnection.On<int>("NewFold", (index) =>
        {
            if (DebugInfo.debug)
                Console.WriteLine($"NewFold from hub with index=\"{index}\"");

            thisTable.Fold(index);

            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int, int>("NewCheck", (index, newBid) =>
        {
            if (DebugInfo.debug)
                Console.WriteLine($"NewCheck from hub with index=\"{index}\" and bid {newBid}");

            thisTable.Check(index, newBid);

            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int, int>("NewBid", (index, newBid) =>
        {
            if (DebugInfo.debug)
                Console.WriteLine($"NewBid from hub with index=\"{index}\" and bid=\"{newBid}\"");

			thisTable.Bid(index, newBid);

            //set minimalBid
            if (MyIndex != -1)
            {
                minBid = thisTable.Players[index].CurrentBid - thisTable.Players[MyIndex].CurrentBid;
                bid = minBid;
            }

            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Table>("ReceiveInfo", (tableInfo) =>
        {
            if (DebugInfo.debug)
                Console.WriteLine($"ReceiveInfo from hub with \"{tableInfo.TableName}\"");

            thisTable = tableInfo;

            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Player>("ReceiveNewPlayer", (newPlayer) =>
        {
            if (DebugInfo.debug)
                Console.WriteLine($"ReceiveNewPlayer from hub with \"{newPlayer.Nick}\"");

            thisTable.Players.Add(newPlayer);

            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int>("NewReady", (index) =>
        {
            if (DebugInfo.debug)
                Console.WriteLine($"NewReady from hub with \"{index}\"");

            thisTable.Players[index].IsReady = true;
            ReadyPlayers++;

            if (ReadyPlayers == thisTable.MaxPlayerCount)
            {
                thisTable.GameStarted = true;
            }

            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Table>("StartGame", (table) =>
        {
            if (DebugInfo.debug)
                Console.WriteLine($"StartGame from hub");

            thisTable = table;

            //set minimalBid
            if (MyIndex != -1)
            {
                minBid = thisTable.Blind * 2 - thisTable.Players[MyIndex].CurrentBid;
                bid = minBid;

                //set maximalBid
                int buffer = thisTable.StartChipCount * 6;
                foreach (var player in thisTable.Players)
                {
                    if (player.CurrentBid + player.Chips < buffer)
                        buffer = player.CurrentBid + player.Chips;
                }
                maxBid = buffer;
            }

            if (DebugInfo.debug)
                Console.WriteLine($"Bidding starts with player index {thisTable.Turn}");

            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("AddToGroup", tableName);
        await hubConnection.SendAsync("RequestInfo", tableName);
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
