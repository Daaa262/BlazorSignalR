@page "/game/{tableName}"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@using ZgodnieZTutorialem.Client.Models
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Poker - Gra</PageTitle>
<h1>Stół: @tableName</h1>

@if (!thisTable.GameStarted)
{
    <h2>Gracze: (@thisTable.Players.Count/@thisTable.MaxPlayerCount)</h2>
    @for (int i = 0; i < thisTable.Players.Count; i++)
    {
        <div class="player">
            @if (i == MyIndex)
            {
                @if (thisTable.Players[i].IsReady)
                {
                    <div style="color:#80d000">
                        <h4>Gracz @thisTable.Players[i].Nick:</h4>
                        <p>Stan Konta: @thisTable.Players[i].Chips</p>
                    </div>
                }
                else
                {
                    <div style="color:#009000">
                        <h4>Gracz @thisTable.Players[i].Nick:</h4>
                        <p>Stan Konta: @thisTable.Players[i].Chips</p>
                    </div>
                }
            }
            else
            {
                @if (thisTable.Players[i].IsReady)
                {
                    <div style="color:#a0a000">
                        <h4>Gracz @thisTable.Players[i].Nick:</h4>
                        <p>Stan Konta: @thisTable.Players[i].Chips</p>
                    </div>
                }
                else
                {
                    <h4>Gracz @thisTable.Players[i].Nick:</h4>
                    <p>Stan Konta: @thisTable.Players[i].Chips</p>
                }
            }
        </div>
    }

    @if (!Joined && thisTable.Players.Count < thisTable.MaxPlayerCount)
    {
        <label>
            Nick:
            <input @bind="nick" />
        </label>
        <button @onclick="JoinTable" disabled="@(nick=="")">Dołącz</button>
    }

    @if (Joined && thisTable.Players.Count == thisTable.MaxPlayerCount && MyIndex is not null && !thisTable.Players[MyIndex.Value].IsReady)
    {
        <button @onclick="Ready">Jestem Gotów (@ReadyPlayers/@thisTable.MaxPlayerCount)</button>
    }
}
else
{
    <h1>?????</h1>
}

@code {
    [Parameter] public string? tableName { get; set; }

    private bool Joined = false;
    private HubConnection? hubConnection;
    private int? MyIndex;
    private int ReadyPlayers = 0;
    Table thisTable = new();
    private string nick = "";

    private async Task Ready()
    {
        Console.WriteLine($"Ready called in Game");

		if (hubConnection is not null)
			await hubConnection.SendAsync("Ready", tableName, MyIndex);
    }

    private async Task JoinTable()
    {
        Console.WriteLine($"JoinTable called in Game with nick=\"{nick}\" and tableName=\"{tableName}\"");

		foreach (var player in thisTable.Players)
		{
			if (player.Nick == nick)
            {
                Console.WriteLine("Cannot join (player with this nick already exists");
				return;
			}
		}

        Joined = true;
        MyIndex = thisTable.Players.Count;

        if (hubConnection is not null)
            await hubConnection.SendAsync("JoinTable", tableName, nick);
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/tablehub"))
            .Build();

        hubConnection.On<Table>("ReceiveInfo", (tableInfo) =>
        {
            Console.WriteLine($"ReceiveInfo from hub with \"{tableInfo.TableName}\"");

			thisTable = tableInfo;

            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Player>("ReceiveNewPlayer", (newPlayer) =>
        {
            Console.WriteLine($"ReceiveNewPlayer from hub with \"{newPlayer.Nick}\"");

            thisTable.Players.Add(newPlayer);

            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int>("NewReady", (index) =>
		{
            Console.WriteLine($"NewReady from hub with \"{index}\"");

            thisTable.Players[index].IsReady = true;
			ReadyPlayers++;

		    if (ReadyPlayers == thisTable.MaxPlayerCount)
		    {
			    thisTable.GameStarted = true;
		    }

			InvokeAsync(StateHasChanged);
		});

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("AddToGroup", tableName);
        await hubConnection.SendAsync("RequestInfo", tableName);
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
