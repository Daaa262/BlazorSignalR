@page "/lobby"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@using ZgodnieZTutorialem.Client.Models
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Poker - Stoły</PageTitle>

<div class="form-group">
    <label>
        Nazwa Stołu:
        <input @bind="tableName" />
    </label>
</div>
<div class="form-group">
    <label>
        Ilość Graczy (2-6):
        <input @bind="playerCount" />
    </label>
</div>
<div class="form-group">
    <label>
        Ilość Żetonów (100-10000):
        <input @bind="chipCount" />
    </label>
</div>
<button @onclick="AddTable" disabled="@(!IsConnected || playerCount < 2 || playerCount > 6 || chipCount < 100 || chipCount > 10000)">Utwórz</button>

<hr>

@foreach (var tab in tables)
{
    @if (tab.PlayerCount == tab.TotalPlayerCount)
    {
        <button style="background-color:#ff9090" @onclick="() => GoToTable(tab.TableName)">Stół: @tab.TableName: (@tab.PlayerCount / @tab.TotalPlayerCount) graczy, @tab.ChipCount żetonów</button>
    }
    else
    {
        <button style="background-color:#90ff90" @onclick="() => GoToTable(tab.TableName)">Stół: @tab.TableName: (@tab.PlayerCount / @tab.TotalPlayerCount) graczy, @tab.ChipCount żetonów</button>
    }

    <br>
    <br>
}

@code {
    private void GoToTable(string tableName)
    {
        Navigation.NavigateTo($"/game/{tableName}");
    }

    private HubConnection? hubConnection;
    private List<Table> tables = [];
    private string tableName = "";
    private int playerCount = 2;
    private int chipCount = 500;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/tablehub"))
            .Build();

        hubConnection.On<string, int, int, int>("ReceiveNewTable", (tableName, totalPlayerCount, chipCount, playerCount) =>
        {
            tables.Add(new Table(tableName, totalPlayerCount, chipCount, playerCount));
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, int>("ReceiveNewPlayerCount", (tableName, newCount) =>
		{
		    for (int i = 0; i < tables.Count; i++)
		    {
			    if (tables[i].TableName == tableName)
			    {
				    tables[i].PlayerCount = newCount;
				    break;
			    }
		    }
			InvokeAsync(StateHasChanged);
		});

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("GetTables");
    }

    private async Task AddTable()
    {
        if (hubConnection is not null && tableName != "")
        {
            await hubConnection.SendAsync("AddTable", tableName, playerCount, chipCount, 0);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}