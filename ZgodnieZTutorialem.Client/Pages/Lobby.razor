@page "/lobby"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Poker - Stoły</PageTitle>

<div class="form-group">
    <label>
        Nazwa Stołu:
        <input @bind="tableName" />
    </label>
</div>
<div class="form-group">
    <label>
        Ilość Graczy (2-6):
        <input @bind="playerCount" />
    </label>
</div>
<div class="form-group">
    <label>
        Ilość Żetonów (100-10000):
        <input @bind="chipCount" />
    </label>
</div>
<button @onclick="AddTable" disabled="@(!IsConnected || playerCount < 2 || playerCount > 6 || chipCount < 100 || chipCount > 10000)">Utwórz</button>

<hr>

@foreach (var message in messages)
{
    <button @onclick="GoToTable">@message</button>
    <br>
    <br>
}

@code {
    private void GoToTable()
    {
		Navigation.NavigateTo($"/game/{tableName}");
    }

    private HubConnection? hubConnection;
    private List<string> messages = [];
    private string tableName = "Nowy Stół";
    private int playerCount = 2;
    private int chipCount = 500;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/tablehub"))
            .Build();

        hubConnection.On<string, int, int>("ReceiveNewTable", (tableName, playerCount, chipCount) =>
        {
            string tableTitle = $"Stół \"{tableName}\": {playerCount} graczy, {chipCount} żetonów";
            messages.Add(tableTitle);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("GetTables");
    }

    private async Task AddTable()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("AddTable", tableName, playerCount, chipCount);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}