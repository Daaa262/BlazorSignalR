@page "/lobby"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@using ZgodnieZTutorialem.Client.Models
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Poker - Stoły</PageTitle>

<div class="form-group">
    <label>
        Nazwa Stołu:
        <input @bind="tableName" />
    </label>
</div>
<div class="form-group">
    <label>
        Ilość Graczy (2-6):
        <input @bind="playerCount" />
    </label>
</div>
<div class="form-group">
    <label>
        Ilość Żetonów (100-10000):
        <input @bind="chipCount" />
    </label>
</div>
<button @onclick="AddTable" disabled="@(!IsConnected || playerCount < 2 || playerCount > 6 || chipCount < 100 || chipCount > 10000)">Utwórz</button>

<hr>

@foreach (var tab in tables)
{
    @if (tab.Players.Count == tab.MaxPlayerCount)
    {
        @if(tab.TableName is not null)
        {
            <button style="background-color:#ff9090" @onclick="() => GoToTable(tab.TableName)">Stół: @tab.TableName: (@tab.Players.Count / @tab.MaxPlayerCount) graczy, @tab.StartChipCount żetonów</button>
        }
    }
    else
    {
        @if (tab.TableName is not null)
        {
            <button style="background-color:#90ff90" @onclick="() => GoToTable(tab.TableName)">Stół: @tab.TableName: (@tab.Players.Count / @tab.MaxPlayerCount) graczy, @tab.StartChipCount żetonów</button>
        }
    }

    <br>
    <br>
}

@code {
    private void GoToTable(string tableName)
    {
        Console.WriteLine($"GoToTable called for \"{tableName}\"");

        Navigation.NavigateTo($"/game/{tableName}");
    }

    private HubConnection? hubConnection;
    private List<Table> tables = new();
    private string tableName = "";
    private int playerCount = 2;
    private int chipCount = 500;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/tablehub"))
            .Build();

        hubConnection.On<Table>("ReceiveNewTable", (newTable) =>
        {
            Console.WriteLine($"ReceiveNewTable from hub with tableName=\"{newTable.TableName}\" and {newTable.Players.Count} players");
            tables.Add(newTable);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, Player>("ReceiveNewPlayerLobby", (tableName, newPlayer) =>
        {
            Console.WriteLine($"ReceiveNewPlayerLobby from hub with \"{tableName}\" and \"{newPlayer.Nick}\"");

            foreach (var tab in tables)
            {
                if (tab.TableName == tableName)
                {
                    Console.WriteLine($"{newPlayer.Nick} added to {tab.TableName}");
                    tab.Players.Add(newPlayer);
                    break;
                }
            }

            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("GetTables");
    }

    private async Task AddTable()
    {
		Console.WriteLine($"AddTable called in Lobby");

        if (hubConnection is not null && tableName != "")
        {
            await hubConnection.SendAsync("AddTable", new Table(tableName, playerCount, chipCount));
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}